<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_interactable</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>words = ""; //displayed string
activeOnContact = false;
requiredItem = -1; //neededitem
requiredAction = false; //needed additional selection
destroyOnActive = false;
destroyOnContact = false;
requiredDir = 0;
giveItems = ds_queue_create();
textQueued = false;
useDecision = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_meeting(x,y,obj_player)) {
    if (!pauseState) {
        if (activeOnContact || keyboard_check_pressed(ord("Z"))) {
            haveDecision = useDecision;
            if (obj_player.facing == requiredDir) {
                if (!displayDialog) {
                    displayDialog = true;
                }
                if (!textQueued) {
                    var newWords = words;
                    while (string_length(newWords) &gt; 0) {
                        var loc = autoStringCutLocation(newWords,130);
                        ds_queue_enqueue(dialogQueue,autoStringCut(newWords,130));
                        newWords = string_copy(newWords,loc+1,string_length(newWords)-loc);
                    }
                    if (!useDecision) {
                        while(ds_queue_size(giveItems) &gt; 0) {
                            addInventoryItem(ds_queue_dequeue(giveItems));
                        }
                    }
                    textQueued = true;
                }
            }
            if (destroyOnActive) {instance_destroy();}
        }
        if (destroyOnContact) {instance_destroy();}
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
