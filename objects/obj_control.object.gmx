<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wport[0],view_hport[0]);
global.gridSize = 16;
global.grid = mp_grid_create(0,0,room_width div global.gridSize, room_height div global.gridSize,global.gridSize,global.gridSize);
mp_grid_add_instances(global.grid,obj_wall,false);
mp_grid_add_instances(global.grid,obj_player,false);
/**************** PAUSE ****************/
globalvar pauseState;
pauseState = false;
/**************** SURFACE ****************/
global.surface = surface_create(room_width,room_height);
globalvar drawSurface, darknessLevel;
drawSurface = true;
darknessLevel = 0.95;
/**************** INVENTORY ****************/
globalvar inventorySize, inventory, inventoryPage, accessInventory;
enum inventoryData {
    item = 0,
    quantity = 1
}
inventorySize = 10;
accessInventory = false;
currentInventoryPage = 0;
currentSelectedItem = 0;
itemsPerPage = 5;
inventoryPage = ceil(inventorySize/itemsPerPage);
for (var i = 0; i &lt; inventorySize; i++) {
    inventory[i,inventoryData.item] = "";
    inventory[i,inventoryData.quantity] = 0;
}
globalvar inventorySubOption, maxSubOption;
maxSubOption = 2;
for (var i = 0; i &lt; maxSubOption; i++) {
    inventorySubOption[i] = ""; //Option Name;
}
/**************** ITEM NAMES ****************/
var f = working_directory+"/itemName.txt";
var file = file_text_open_read(f);
var i = 0;
globalvar inventoryName;
if (file != -1) {
    while (!file_text_eof(file)) {
        inventoryName[i++] = file_text_readln(file);
    }
}
file_text_close(file);
/**************** ROOMS SHENANIGANS****************/
globalvar totalRooms;
totalRooms = 0;
var rm = room_first;
while (rm != -1) {
    rm = room_next(rm);
    totalRooms++;
}

globalvar hotelRoom, hotelHall, floors, maxRooms, currentFloor;
floors = 4;
maxRooms = floors*10;
currentFloor = -1;
for (var i = 0; i &lt; floors; i++) {
    if (i &lt; floors-1) {
        hotelHall[i] = room_duplicate(rm_hallway);
    }
    else {
        hotelHall[i] = room_duplicate(rm_hallway_top);
    }
    totalRooms++;
}
for (var i = 0; i &lt; maxRooms; i++) {
    hotelRoom[i] = room_duplicate(rm_hotelRoom1);
    totalRooms++;
}
/**************** ROOM NAMES****************/
globalvar roomName, currentLocation;
var f = working_directory+"/roomNames.txt";
var file = file_text_open_read(f);
var i = 0;
if (file != -1) {
    while (!file_text_eof(file)) {
        roomName[i] = file_text_readln(file);
        roomName[i] = string_copy(roomName[i],0,string_length(roomName[i])-1);
        i++;
    }
}
file_text_close(file);
currentLocation = roomName[room];
/**************** EVENTS ****************/
globalvar event;
for (var i = 0; i &lt; 20; i++) {
    event[i] = false;
}
/**************** ONSCREEN DIALOG ****************/
globalvar dialogWord, displayDialog, dialogQueue;
dialogWord = "";
displayDialog = false;
typerWord = "";
typer = 0;
dialogQueue = ds_queue_create();
/**************** ROOM TRANSITION ****************/
globalvar roomTransition, transitionMaxTime, transitionTime;
roomTransition = false;
transitionMaxTime = 30;
transitionTime = 0;

/**************** OTHER ****************/
globalvar gameFont, inventoryFont;
gameFont = font_add_sprite(spr_game_font,32,false,-18);
inventoryFont = font_add_sprite(spr_inventory_font,32,false,-16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentLocation = roomName[room];
pauseState = accessInventory || displayDialog;
if (instance_exists(obj_player)) {
    view_xview[0] = min(max(0,obj_player.x-(view_wview[0]/2)+16),room_width-view_wview[0]);
    view_yview[0] = min(max(0,obj_player.y-(view_hview[0]/2)+16),room_height-view_hview[0]);
}
/**************** INVENTORY ****************/
if (keyboard_check_pressed(ord("C"))) {
    accessInventory = !accessInventory;
}
if (accessInventory) {
    pauseState = true;
    if (keyboard_check_pressed(vk_up)) {
        if (currentSelectedItem &gt; 0) {
            currentSelectedItem--;
        }
        else {
            if (currentInventoryPage &gt; 0) {
                currentInventoryPage--;
            }
            else {
                currentInventoryPage = inventoryPage-1;
            }
            currentSelectedItem = itemsPerPage-1;
        }
    }
    if (keyboard_check_pressed(vk_down)) {
        if (currentSelectedItem &lt; itemsPerPage-1) {
            currentSelectedItem++;
        }
        else {
            if (currentInventoryPage &lt; inventoryPage-1) {
                currentInventoryPage++;
            }
            else {
                currentInventoryPage = 0;;
            }
            currentSelectedItem = 0;
        }
    }
    if (keyboard_check_pressed(vk_left)) {
        if (currentInventoryPage &gt; 0) {
            currentInventoryPage--;
        }
        else {
            currentInventoryPage = inventoryPage-1;
        }
    }
    if (keyboard_check_pressed(vk_right)) {
        if (currentInventoryPage &lt; inventoryPage-1) {
            currentInventoryPage++;
        }
        else {
            currentInventoryPage = 0;;
        }
    }
}
if (roomTransition) {
    if (transitionTime &lt; transitionMaxTime) {
        transitionTime++;
    }
    else {
        transitionTime = 0;
        roomTransition = false;
    }
}
/**************** TYPEWRITER ****************/
if (displayDialog) {
    if (dialogWord != "") {
        if (string_length(typerWord) &lt; string_length(dialogWord)){
            typer++;
        }
        typerWord = string_copy(dialogWord,0,typer);
        if (keyboard_check_pressed(ord("Z"))) {
            if (string_width(typerWord) &lt; string_width(dialogWord)){
                typer = string_width(dialogWord);
            }
            else {
                typer = 0;
                typerWord = "";
                dialogWord = "";
            }
        }
    }
    else {
        if (ds_queue_size(dialogQueue) &gt; 0) {
            dialogWord = ds_queue_dequeue(dialogQueue);
        }
        else {
            displayDialog = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xv, yv, wv, hv, wp, hp;
xv = view_xview[0];
yv = view_yview[0];
wv = view_wview[0];
hv = view_hview[0];
wp = view_wport[0];
hp = view_hport[0];
draw_set_valign(fa_top);
draw_set_halign(fa_left);
if (instance_exists(obj_player)) {
    draw_text_colour(0,0,string(obj_player.x)+","+string(obj_player.y),white,white,white,white,1);
    draw_text_colour(0,16,"room id: "+string(room),white,white,white,white,1);
    draw_text_colour(0,32,"room: "+string(currentLocation),white,white,white,white,1);
    draw_text_colour(0,48,"dialog size: "+string(ds_queue_size(dialogQueue)),white,white,white,white,1);
}
/**************** INVENTORY *****************/
if (accessInventory) {
    draw_set_font(inventoryFont);
    for (var i = itemsPerPage*(currentInventoryPage); i &lt; itemsPerPage*(currentInventoryPage+1); i++) {
        draw_set_valign(fa_center);
        draw_set_halign(fa_middle);
        var selectedColor = white
        if (i mod itemsPerPage == currentSelectedItem) {
            selectedColor = red;
        }
        draw_sprite_ext(spr_blank_inventory_slot,0,wp-128,32+((i mod itemsPerPage)*64),1,1,0,selectedColor,1);
        var itemName = "----------";
        if (inventory[i,inventoryData.item] != "") {
            itemName = inventory[i,inventoryData.item];
        }
        draw_text_transformed_colour(wp-128,32+((i mod itemsPerPage)*64),itemName,1,1,0,white,white,white,white,1);
    }
}
/**************** DIALOG *****************/
if (displayDialog) {
    draw_set_font(gameFont);
    draw_sprite_part(spr_dialog_box,0,0,0,16,16,0,hp-128); //top-left
    draw_sprite_part(spr_dialog_box,0,16,0,16,16,wp-16,hp-128); //top-right
    draw_sprite_part(spr_dialog_box,0,0,16,16,16,0,hp-16); //bottom-left
    draw_sprite_part(spr_dialog_box,0,16,16,16,16,wp-16,hp-16); // bottom-right
    
    draw_sprite_general(spr_dialog_box,0,8,0,16,16,16,hp-128,(wp-32)/16,1,0,white,white,white,white,1); //top
    draw_sprite_general(spr_dialog_box,0,8,16,16,16,16,hp-16,(wp-32)/16,1,0,white,white,white,white,1); //bottom
    draw_sprite_general(spr_dialog_box,0,0,8,16,16,0,hp-112,1,6,0,white,white,white,white,1); //left
    draw_sprite_general(spr_dialog_box,0,16,8,16,16,wp-16,hp-112,1,6,0,white,white,white,white,1); //right
    draw_rectangle_colour(16,hp-112,wp-16,hp-16,0,0,0,0,false);
    
    draw_set_colour(white);
    draw_text_ext(32,hp-112,typerWord,48,960);
    draw_set_colour(white);
}
/**************** ROOM TRANSITION *****************/
if (roomTransition) {
    draw_set_alpha(sin(degtorad(transitionTime*6)));
    draw_rectangle(0,0,wp,hp,false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/**************** surface *****************/
if (drawSurface) {
    if (surface_exists(global.surface)) {
        surface_set_target(global.surface);
        draw_set_blend_mode(bm_subtract);
        draw_clear_alpha(0,1);
        for (var i = 0; i &lt; instance_number(obj_light); i++) {
            var light = instance_find(obj_light,i);
            assert(light.lightLevel &gt; 0);
            var drawLight = true;
            if (light.flicker) {
                if (irandom(40) &gt; 0) {
                    drawLight = false;
                }
            }
            if (drawLight) {
                draw_set_alpha(1/light.lightLevel);
                draw_ellipse_colour(light.x-light.radius,light.y-(light.radius/2),light.x+light.radius,light.y+(light.radius/2),white,0,false);
                //draw_circle(light.x,light.y,16,false);
                draw_set_alpha(1);
            }
        }
        if (instance_exists(obj_player)) {
            with(obj_player) {
                if (drawSurface) {
                    draw_primitive_begin(pr_trianglefan);
                    draw_set_alpha(0.7);
                    draw_vertex(x+8,y+8);
                    //draw_vertex(x+8+lengthdir_x(spotRange,direction+spotFov),y+8+lengthdir_y(spotRange,direction+spotFov));
                    for (var i = -spotFov; i &lt; spotFov; i++) {
                        draw_vertex(x+8+lengthdir_x(spotRange,direction+i),y+8+lengthdir_y(spotRange,direction+i));
                    }
                    //draw_vertex(x+8+lengthdir_x(spotRange,direction-spotFov),y+8+lengthdir_y(spotRange,direction-spotFov));
                    draw_vertex(x+8,y+8);
                    draw_set_alpha(1);
                    draw_primitive_end();
                }
            }
        }
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
        draw_set_alpha(darknessLEvel);
        draw_surface(global.surface,0,0);
        draw_set_alpha(1);
    }
    else {
        global.surface = surface_create(room_width,room_height);
    }
}
/*draw_set_alpha(0.3);
for (var i = 0; i &lt; room_width div global.gridSize; i++) {
    for (var j = 0; j &lt; room_height div global.gridSize; j ++) {
        if (mp_grid_get_cell(global.grid,i,j) == -1) {
            //if cell is occupied
            draw_set_colour(red);
        }
        else {
            //if cell is not occupied
            draw_set_colour(c_green);
        }
        draw_rectangle(i*global.gridSize,j*global.gridSize,(i+1)*global.gridSize,(j+1)*global.gridSize,false);
        draw_set_colour(white);
    }
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
