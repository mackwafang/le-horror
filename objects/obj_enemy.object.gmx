<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_kinetic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path = path_add();
moveSpeed = 1;
canMove = true;
xPrev = x;
yPrev = y;
xx = x;
yy = y;
spotFov = 45;
spotRange = 128;
timeToDest = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
if (pauseState) {exit;}
if (canMove) {
    /**************** check player in view range ******************/
    var inRange = false;
    if (instance_exists(obj_player)) {
        from = self;
        to = obj_player;
        var x1, y1, x2, y2, adist, bdist;
        x1 = (to.x+16)-(from.x+16);
        y1 = (to.y+16)-(from.y+16);
        x2 = lengthdir_x(1,from.image_angle);
        y2 = lengthdir_y(1,from.image_angle);
        adist = sqrt(sqr(x1)+sqr(y1));
        bdist = sqrt(sqr(x2)+sqr(y2));
        
        angle = arccos(dot_product(x1,y1,x2,y2)/max(1,adist*bdist))*(180/pi);
        
        if(angle &lt; spotFov) {
            if (adist &lt; spotRange) {
                inRange = true;
            }
        }
    }
    /************ grid follow ***********/
    if ((xx == x) &amp;&amp; (yy == y)) {
        if ((xPrev != xx) || (yPrev != yy)) {
            mp_grid_clear_cell(global.grid,xPrev div global.gridSize, yPrev div global.gridSize);
            xPrev = x;
            yPrev = y;
        }
        if (instance_exists(obj_player)) {
            var xCur = x div global.gridSize;
            var yCur = y div global.gridSize;
            var targetX = irandom(room_width);
            var targetY = irandom(room_height);
            if (inRange) {
                targetX = obj_player.x;
                targetY = obj_player.y;
            }
            else {
                if (path_exists(path)){
                    if (path_get_number(path) &gt; 3) {
                        targetX = path_get_point_x(path,path_get_number(path)-1);
                        targetY = path_get_point_y(path,path_get_number(path)-1);
                    }
                    else {
                        if (irandom(4) == 0) {
                            targetX = irandom(room_width);
                            targetY = irandom(room_height);
                        }
                    }
                }
            }
            mp_grid_clear_cell(global.grid,xCur,yCur);
            if (targetX == obj_player.x &amp;&amp; targetY == obj_player.y) {
                mp_grid_clear_cell(global.grid,targetX div global.gridSize, targetY div global.gridSize);
            }
            var foundPath = mp_grid_path(global.grid,path,x,y,targetX,targetY,false);
            mp_grid_add_cell(global.grid,xCur,yCur);
            if (targetX == obj_player.x &amp;&amp; targetY == obj_player.y) {
                mp_grid_add_cell(global.grid,targetX div global.gridSize, targetY div global.gridSize);
            }
            if (foundPath) {
                if (path_get_number(path) &gt; 0) {
                    xx = (path_get_point_x(path,1) div global.gridSize)*global.gridSize;
                    yy = (path_get_point_y(path,1) div global.gridSize)*global.gridSize;
                }
            }
        }
        if (mp_grid_get_cell(global.grid, xx div global.gridSize, yy div global.gridSize) == -1) { //check to see if the block moving to is blocked
            //stay still if the grid moving to is blocked
            xx = x;
            yy = y;
        }
        else {
            //lock moving to grid
            mp_grid_add_cell(global.grid, xx div global.gridSize, yy div global.gridSize);
        }
    }
    if (x &gt; xx) {
        if (place_free(x-min(moveSpeed,x-xx),y)) {
            x -= min(moveSpeed,x-xx);
            direction = 180;
        }
    }
    if (x &lt; xx) {
        if (place_free(x+min(moveSpeed,xx-x),y)) {
            x += min(moveSpeed,xx-x);
            direction = 0;
        }
    }
    if (y &gt; yy) {
        if (place_free(x,y-min(moveSpeed,y-yy))) {
            y -= min(moveSpeed,y-yy);
            direction = 90;
        }
    }
    if (y &lt; yy) {
        if (place_free(x,y+min(moveSpeed,yy-y))) {
            y += min(moveSpeed,yy-y);
            direction = 270;
        }
    }
    var xx1, yy1, xx2, yy2;
    var dist = 0;
    for (var i = 1; i &lt; path_get_number(path)-1; i++) {
        xx1 = path_get_point_x(path,i);
        yy1 = path_get_point_y(path,i);
        xx2 = path_get_point_x(path,i+1);
        yy2 = path_get_point_y(path,i+1);
        dist += sqrt(sqr(xx2-xx1)+sqr(yy2-yy1));
    }
    timeToDest = dist/moveSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (path_exists(path)) {
    draw_path(path,0,0,true);
    for (var i = 1; i &lt; path_get_number(path)-1; i++) {
        draw_circle(path_get_point_x(path,i),path_get_point_y(path,i),2,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
