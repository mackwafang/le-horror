<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_move_rooms</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gotoRoom = -1;
xto = 0;
yto = 0;
requiredItem = -1;
actionRequired = false;
flipDir = false;
gotoFloor = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var go = false;
if (place_meeting(x,y,obj_player)) {
    if (requiredItem == -1) {
        //no item required;
        if (!actionRequired) {
            go = true;
            print("move");
        }
        else {
            if (keyboard_check_pressed(ord("Z"))) {
                go = true;
                print("move via press");
            }
        }
    }
}
if (go) {
    roomTransition = true;
    if (transitionTime = transitionMaxTime/2) {
        room_goto(gotoRoom);
        print(gotoRoom);
        currentFloor = gotoFloor;
        obj_player.x = xto;
        obj_player.y = yto;
        if (flipDir) {
            switch(obj_player.sprite_index) {
                case spr_player_right:
                    obj_player.sprite_index = spr_player_left;
                    break;
                case spr_player_left:
                    obj_player.sprite_index = spr_player_right;
                    break;
                case spr_player_up:
                    obj_player.sprite_index = spr_player_down;
                    break;
                case spr_player_down:
                    obj_player.sprite_index = spr_player_up;
                    break;
                default:
                    show_error("sprite "+sprite_get_name(obj_player.sprite_index)+" should not be on player",true);
            }
        }
        surface_free(global.surface);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
